{"version":3,"sources":["App.module.css","components/CashPanel/CashPanel.module.css","components/Body/Body.module.css","components/Menu/Menu.module.css","utility/Helpers.ts","stores/UseStores.ts","components/TabPanel/TabPanel.tsx","components/CashPanel/CashPanel.tsx","components/LastRecordsPanel/LastRecordsPanel.tsx","components/TypesPanel/TypesPanel.tsx","components/Body/Body.tsx","components/Menu/Menu.tsx","services/CacheService.ts","stores/AppStore.ts","stores/ServicesStore.ts","stores/TypesStore.ts","stores/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Helpers","combineStyles","result","styles","length","otherStyles","slice","forEach","s","Object","keys","k","useStores","useContext","MobXProviderContext","store","TabPanel","props","children","id","labelledby","value","index","other","role","hidden","aria-labelledby","useStyles","makeStyles","theme","createStyles","tabPanel","gridGap","spacing","cardLabelText","marginTop","color","palette","text","primary","CashPanel","observer","appStore","typesStore","css","classes","useTheme","getThemeColorStyle","split","p","selectedMenuIndex","Grid","container","className","grid","types","map","type","key","name","item","xs","alignItems","justify","IconButton","card","label","cardLabel","IconComponent","style","iconColor","fontSize","cardIcon","Typography","variant","LastRecordsPanel","TypesPanel","List","component","list","ListItem","button","ListItemAvatar","ListItemText","primaryTypographyProps","Divider","body","padding","fab","position","bottom","right","Body","Fab","size","aria-label","firstBar","background","light","secondBar","dark","menuIcon","default","comboButton","searchIcon","Menu","menuTabProps","AppBar","Toolbar","headerTitle","Box","headerBox","Button","endIcon","ArrowDropDown","comboButtonTextBox","Date","toDateString","Search","Tabs","onChange","event","newValue","setSelectedMenuIndex","Tab","icon","AttachMoney","MenuBook","MoreHoriz","CacheService","this","get","then","r","version","clear","add","entry","entryStr","JSON","stringify","date","localStorage","setItem","validAt","enableCache","getItem","console","log","parsedResult","parse","AppStore","AppJson","_services","_loadSelectedMenuIndex","a","services","cache","observable","action","ServicesStore","TypesStore","initializeDefaultTypes","push","Fastfood","LocalGroceryStore","DirectionsBus","LocalMall","LocalGasStation","ChildFriendly","ImportantDevices","MoreVert","servicesStore","stores","App","CssBaseline","page","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,KAAO,kBAAkB,OAAS,sB,mBCApDD,EAAOC,QAAU,CAAC,SAAW,4BAA4B,KAAO,wBAAwB,KAAO,wBAAwB,UAAY,6BAA6B,SAAW,8B,6DCA3KD,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,UAAY,wBAAwB,YAAc,0BAA0B,YAAc,0BAA0B,mBAAqB,mC,gSCDrJC,E,kCAAAA,EACGC,cAAgB,WAAoB,IACzC,IAAIC,EADqC,mBAAhBC,EAAgB,yBAAhBA,EAAgB,gBAEzC,GAAIA,EAAOC,OAAQ,CACjBF,EAAM,eAAQC,EAAO,IACrB,IAAME,EAAcF,EAAOG,MAAM,GAC7BD,EAAYD,QACdC,EAAYE,SAAQ,SAACC,GACnBC,OAAOC,KAAKF,GAAGD,SAAQ,SAACI,GACjBT,EAAOS,GAGVT,EAAOS,IAAP,WAAiBH,EAAEG,IAFnBT,EAAOS,GAAKH,EAAEG,SAQxB,OAAOT,GAIIF,I,YAAAA,I,gCChBAY,EAHG,WAChB,OAAOC,qBAAWC,KAAqBC,OCsB1BC,EAfE,SAACC,GAAmB,IAC3BC,EAAkDD,EAAlDC,SAAUC,EAAwCF,EAAxCE,GAAIC,EAAoCH,EAApCG,WAAYC,EAAwBJ,EAAxBI,MAAOC,EAAiBL,EAAjBK,MAAOC,EAAUN,EAAVM,MAChD,OACE,uCACEC,KAAK,WACLC,OAAQJ,IAAUC,EAClBH,GAAE,UAAKA,EAAL,YAAWG,GACbI,kBAAA,UAAoBN,EAApB,YAAkCE,IAC9BC,GAEHF,IAAUC,GAASJ,I,iBCFpBS,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,SAAU,CACRC,QAASH,EAAMI,QAAQ,IAEzBC,cAAe,CACbC,UAAWN,EAAMI,QAAQ,GACzBG,MAAOP,EAAMQ,QAAQC,KAAKC,cA8EjBC,EAzEGC,aAAS,WAAO,IAAD,EAIqB7B,IAFlD8B,EAF6B,EAE7BA,SACAC,EAH6B,EAG7BA,WAGIxC,EAASwB,IACTiB,EAAM5C,EAAQC,cAAcE,EAAQ0C,KACpChB,EAAQiB,cAERC,EAAqB,SAACX,GAC1B,IAAKA,IAAUA,EAAMhC,OACnB,MAAO,GAET,GAAiB,MAAbgC,EAAM,GACR,OAAOA,EAET,IAAIlC,EAAS2B,EAIb,OAHAO,EAAMY,MAAM,KAAKzC,SAAQ,SAAC0C,GACxB/C,EAASA,EAAO+C,MAEX/C,GAGT,OACE,kBAAC,EAAD,CACEiB,GAAG,sBACHC,WAAW,sBACXC,MAAOqB,EAASQ,kBAChB5B,MAAO,GAGP,kBAAC6B,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAWT,EAAIU,KAAMrB,QAAS,GAC3CU,EAAWY,MAAMC,KAAI,SAACC,GAAD,OACpB,kBAACN,EAAA,EAAD,CACEO,IAAKD,EAAKE,KACVC,MAAI,EACJC,IAAE,EACFT,WAAS,EACTU,WAAW,SACXC,QAAQ,UAER,kBAACC,EAAA,EAAD,CAAYX,UAAWT,EAAIqB,KAAMpB,QAAS,CAAEqB,MAAOtB,EAAIuB,YACrD,kBAACV,EAAKW,cAAN,CACEC,MAAO,CACLjC,MAAOW,EAAmBU,EAAKa,WAC/BC,SAAU,QAEZlB,UAAWT,EAAI4B,WAEjB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,YAAYrB,UAAWT,EAAIV,eAC5CuB,EAAKS,iB,iBCzEhBvC,EAAYC,aAAW,SAACC,GAAD,OAAkBC,YAAa,OAqB7C6C,EAnBUlC,aAAS,WAAO,IAC/BC,EAAqC9B,IAArC8B,SAEFvC,EAASwB,IACTiB,EAAM5C,EAAQC,cAAcE,EAAQ0C,KAE1C,OACE,kBAAC,EAAD,CACE1B,GAAG,8BACHC,WAAW,8BACXC,MAAOqB,EAASQ,kBAChB5B,MAAO,EACPC,MAAO,CAAE8B,UAAWT,EAAIb,WAExB,qD,4DCJAJ,EAAYC,aAAW,SAACC,GAAD,OAAkBC,YAAa,OA2D7C8C,EAzDInC,aAAS,WAAO,IAAD,EAIoB7B,IAFlD8B,EAF8B,EAE9BA,SACAC,EAH8B,EAG9BA,WAGIxC,EAASwB,IACTiB,EAAM5C,EAAQC,cAAcE,EAAQ0C,KACpChB,EAAQiB,cAERC,EAAqB,SAACX,GAC1B,IAAKA,IAAUA,EAAMhC,OACnB,MAAO,GAET,GAAiB,MAAbgC,EAAM,GACR,OAAOA,EAET,IAAIlC,EAAS2B,EAIb,OAHAO,EAAMY,MAAM,KAAKzC,SAAQ,SAAC0C,GACxB/C,EAASA,EAAO+C,MAEX/C,GAGT,OACE,kBAAC,EAAD,CACEiB,GAAG,uBACHC,WAAW,uBACXC,MAAOqB,EAASQ,kBAChB5B,MAAO,EACPC,MAAO,CAAE8B,UAAWT,EAAIb,WAExB,kBAAC8C,EAAA,EAAD,CAAMC,UAAU,MAAMzB,UAAWT,EAAImC,MAClCpC,EAAWY,MAAMC,KAAI,SAACC,GAAD,OACpB,yBAAKC,IAAKD,EAAKE,MACb,kBAACqB,EAAA,EAAD,CAAUC,QAAM,GACd,kBAACC,EAAA,EAAD,KACE,kBAACzB,EAAKW,cAAN,CACEC,MAAO,CACLjC,MAAOW,EAAmBU,EAAKa,WAC/BC,SAAU,WAIhB,kBAACY,EAAA,EAAD,CACE5C,QAASkB,EAAKS,MACdkB,uBAAwB,CAAEV,QAAS,gBAGvC,kBAACW,EAAA,EAAD,CAASP,UAAU,iB,iBC9DzBnD,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXwD,KAAM,CACJC,QAAS1D,EAAMI,QAAQ,IAEzBuD,IAAK,CACHC,SAAU,QACVC,OAAQ7D,EAAMI,QAAQ,GACtB0D,MAAO9D,EAAMI,QAAQ,SAuBZ2D,EAlBFnD,aAAS,WAGpB,IAAMtC,EAASwB,IACTiB,EAAM5C,EAAQC,cAAcE,EAAQ0C,KAE1C,OACE,yBAAKQ,UAAWT,EAAI0C,MAClB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACO,EAAA,EAAD,CAAKC,KAAK,SAAS1D,MAAM,UAAU2D,aAAW,MAAM1C,UAAWT,EAAI4C,KACjE,kBAAC,IAAD,W,qJCNF7D,GAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXkE,SAAU,CACRC,WAAYpE,EAAMQ,QAAQE,QAAQ2D,OAEpCC,UAAW,CACTF,WAAYpE,EAAMQ,QAAQE,QAAQ6D,MAEpCC,SAAU,CACRjE,MAAOP,EAAMQ,QAAQ4D,WAAWK,SAElCC,YAAa,CACXnE,MAAOP,EAAMQ,QAAQ4D,WAAWK,SAElCE,WAAY,CACVpE,MAAOP,EAAMQ,QAAQ4D,WAAWK,cA+EvBG,GA1EFhE,aAAS,WAAO,IACnBC,EAAqC9B,IAArC8B,SAEFvC,EAASwB,KACTiB,EAAM5C,EAAQC,cAAcE,EAAQ0C,MAMpC6D,EAAe,SAAC/C,GACpB,MAAO,CACLxC,GAAG,YAAD,OAAcwC,GAChB,gBAAgB,YAAhB,OAA6BA,KAIjC,OACE,oCACE,kBAACgD,EAAA,EAAD,CAAQlB,SAAS,SAASpC,UAAWT,EAAIoD,UACvC,kBAACY,GAAA,EAAD,KACkC,IAA/BlE,EAASQ,mBACR,kBAACuB,EAAA,EAAD,CAAYC,QAAQ,KAAKrB,UAAWT,EAAIiE,aAAxC,6EAI8B,IAA/BnE,EAASQ,mBACR,kBAAC4D,GAAA,EAAD,CAAKzD,UAAWT,EAAImE,WAClB,kBAAC/C,EAAA,EAAD,KACE,kBAACyC,GAAA,EAAD,CAAUpD,UAAWT,EAAIyD,YAE3B,kBAACW,GAAA,EAAD,CACE3D,UAAWT,EAAI2D,YACfU,QAAS,kBAACC,GAAA,EAAD,OAET,0BAAM7D,UAAWT,EAAIuE,oBACnB,+BAAO,IAAIC,MAAOC,gBAClB,iFAGJ,kBAACrD,EAAA,EAAD,KACE,kBAACsD,GAAA,EAAD,CAAYjE,UAAWT,EAAI4D,eAID,IAA/B9D,EAASQ,mBACR,kBAACuB,EAAA,EAAD,CAAYC,QAAQ,KAAKrB,UAAWT,EAAIiE,aAAxC,4BAI8B,IAA/BnE,EAASQ,mBACR,kBAACuB,EAAA,EAAD,CAAYC,QAAQ,KAAKrB,UAAWT,EAAIiE,aAAxC,wBAMN,kBAACF,EAAA,EAAD,CAAQlB,SAAS,SAASrD,MAAM,UAAUiB,UAAWT,EAAIuD,WACvD,kBAACoB,GAAA,EAAD,CACElG,MAAOqB,EAASQ,kBAChBsE,SAtDe,SAACC,EAAYC,GAClChF,EAASiF,qBAAqBD,IAsDxB3B,aAAW,YACXrB,QAAQ,aAER,kBAACkD,GAAA,EAAD,iBAASlB,EAAa,QAAtB,CAA+BmB,KAAM,kBAACC,GAAA,EAAD,SACrC,kBAACF,GAAA,EAAD,iBAASlB,EAAa,gBAAtB,CAAuCmB,KAAM,kBAACE,GAAA,EAAD,SAC7C,kBAACH,GAAA,EAAD,iBAASlB,EAAa,SAAtB,CAAgCmB,KAAM,kBAAC,KAAD,SACtC,kBAACD,GAAA,EAAD,iBAASlB,EAAa,QAAtB,CAA+BmB,KAAM,kBAACG,GAAA,EAAD,e,sCClH1BC,G,WAGnB,WAAYvF,GAAqB,IAAD,gCAFxBA,cAEwB,EAC9BwF,KAAKxF,SAAWA,EAChBwF,KAAKC,IAAI,aAAc,IAAIf,MAAQgB,MAAK,SAACC,GACnC3F,EAAS4F,UAAYD,IACvB,EAAKE,QACL,EAAKC,IAAI,aAAc9F,EAAS4F,a,4FAMrB5E,EAAa+E,G,iFAG1BC,EADmB,kBAAVD,EACEE,KAAKC,UAAU,CAAEC,KAAM,IAAIzB,KAAQqB,UAEnCA,E,SAEQK,aAAaC,QAAQrF,EAAKgF,G,cAAzCxI,E,yBACCA,G,yKAGWwD,EAAasF,G,6EAC3B9I,EAAwB,KACvBgI,KAAKxF,SAASuG,Y,yCACV/I,G,uBAEM4I,aAAaI,QAAQxF,G,WAApCxD,E,SAEEiJ,QAAQC,IAAR,eAAoB1F,EAApB,uBAEGxD,GAAWA,EAAOE,O,yCACdF,G,mBAGDmJ,EAAeV,KAAKW,MAAMpJ,IAC5B8I,E,sBACE,IAAI5B,KAAKiC,EAAaR,MAAQG,G,0CACzBK,EAAaZ,O,eAEtBU,QAAQC,IAAR,eACU1F,EADV,mCACwCsF,EADxC,wBAC+DK,EAAaR,O,kBAErE,M,iCAEFQ,EAAaZ,O,2DAEbvI,G,8QAMH4I,aAAaP,Q,mJCnBRgB,I,8DAlCbjB,QAAUkB,K,KACFC,e,8IAqBAC,uB,wBAAyB,6BAAAC,EAAA,0DAC3B,EAAKC,WAAY,EAAKA,SAASC,MADJ,gCAEG,EAAKD,SAASC,MAAM1B,IAClD,qBAH2B,QAEvBjF,EAFuB,UAM3B,EAAKA,kBAAoBA,GANE,2C,sDAlB/B,OAAOgF,KAAKuB,W,aAEDpI,GAEX6G,KAAKuB,UAAYpI,EAEjB6G,KAAKwB,6B,+CAINI,M,yEAAyB,K,gDACzBA,M,yEAA+B,K,mDAE/BC,M,oFAA8B,SAACrC,GAC9B,EAAKxE,kBAAoBwE,EACzB,EAAKkC,SAASC,MAAMrB,IAAI,oBAAqB,EAAKtF,uB,GCdvC8G,GALb,WAAYH,GAAsB,yBAFlCA,WAEiC,EAC/B3B,KAAK2B,MAAQA,G,gFC2EFI,I,EAjEb,aAAe,IAAD,kEAINC,uBAAyB,WAC/B,EAAK3G,MAAQ,GAEb,EAAKA,MAAM4G,KAAK,CACd/F,cAAegG,KACfzG,KAAM,WACNW,UAAW,yBACXJ,MAAO,uBAGT,EAAKX,MAAM4G,KAAK,CACd/F,cAAeiG,KACf1G,KAAM,YACNW,UAAW,uBACXJ,MAAO,+CAGT,EAAKX,MAAM4G,KAAK,CACd/F,cAAekG,KACf3G,KAAM,UACNW,UAAW,uBACXJ,MAAO,+CAGT,EAAKX,MAAM4G,KAAK,CACd/F,cAAemG,KACf5G,KAAM,cACNW,UAAW,uBACXJ,MAAO,6BAGT,EAAKX,MAAM4G,KAAK,CACd/F,cAAeoG,KACf7G,KAAM,iBACNW,UAAW,wBACXJ,MAAO,qDAGT,EAAKX,MAAM4G,KAAK,CACd/F,cAAeqG,KACf9G,KAAM,aACNW,UAAW,wBACXJ,MAAO,6BAGT,EAAKX,MAAM4G,KAAK,CACd/F,cAAesG,KACf/G,KAAM,eACNW,UAAW,0BACXJ,MAAO,yCAGT,EAAKX,MAAM4G,KAAK,CACd/F,cAAeuG,KACfhH,KAAM,YACNW,UAAW,wBACXJ,MAAO,0CA3DTgE,KAAKgC,0B,oCAHNJ,M,iECTGpH,GAAW,IAAI6G,GAEfqB,GAAgB,IAAIZ,GADL,IAAI/B,GAAavF,KAEtCA,GAASkH,SAAWgB,GACpB,IAOeC,GALA,CACbnI,YACAC,WAJiB,IAAIsH,ICWRa,GAZH,WACV,OACE,kBAAC,IAAD,CAAU/J,MAAOA,IACf,kBAACgK,EAAA,EAAD,MACA,yBAAK1H,UAAWR,IAAQmI,MACtB,kBAAC,GAAD,MACA,kBAAC,EAAD,SCFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.0ef2a480.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"App_page__2L-Jj\",\"footer\":\"App_footer__12-B7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabPanel\":\"CashPanel_tabPanel__Y91Tq\",\"grid\":\"CashPanel_grid__1M0h2\",\"card\":\"CashPanel_card__2ETq-\",\"cardLabel\":\"CashPanel_cardLabel__3f2v_\",\"lastCard\":\"CashPanel_lastCard__2tePY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Body_body__2G_GS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerBox\":\"Menu_headerBox__1Me5e\",\"headerTitle\":\"Menu_headerTitle__2LUUc\",\"comboButton\":\"Menu_comboButton__OoKdQ\",\"comboButtonTextBox\":\"Menu_comboButtonTextBox__1axJS\"};","class Helpers {\r\n  static combineStyles = (...styles: any) => {\r\n    let result: any;\r\n    if (styles.length) {\r\n      result = { ...styles[0] };\r\n      const otherStyles = styles.slice(1);\r\n      if (otherStyles.length) {\r\n        otherStyles.forEach((s: any) => {\r\n          Object.keys(s).forEach((k: string) => {\r\n            if (!result[k]) {\r\n              result[k] = s[k];\r\n            } else {\r\n              result[k] += ` ${s[k]}`;\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n}\r\n\r\nexport default Helpers;\r\n","import { MobXProviderContext } from 'mobx-react';\r\nimport { useContext } from 'react';\r\n\r\nconst useStores = () => {\r\n  return useContext(MobXProviderContext).store;\r\n};\r\nexport default useStores;\r\n","import React from 'react';\r\n\r\ninterface IProps {\r\n  children: any;\r\n  id: string;\r\n  labelledby: string;\r\n  value: number;\r\n  index: number;\r\n  other?: any;\r\n}\r\n\r\nconst TabPanel = (props: IProps) => {\r\n  const { children, id, labelledby, value, index, other } = props;\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`${id}-${index}`}\r\n      aria-labelledby={`${labelledby}-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TabPanel;\r\n","import {\r\n  createStyles,\r\n  IconButton,\r\n  makeStyles,\r\n  Theme,\r\n  useTheme,\r\n  Grid,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport { observer } from 'mobx-react';\r\nimport React from 'react';\r\nimport TypeEntry from '../../models/entries/TypeEntry';\r\nimport AppStore from '../../stores/AppStore';\r\nimport TypesStore from '../../stores/TypesStore';\r\nimport useStores from '../../stores/UseStores';\r\nimport Helpers from '../../utility/Helpers';\r\nimport TabPanel from '../TabPanel/TabPanel';\r\nimport classes from './CashPanel.module.css';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    tabPanel: {\r\n      gridGap: theme.spacing(2),\r\n    },\r\n    cardLabelText: {\r\n      marginTop: theme.spacing(1),\r\n      color: theme.palette.text.primary,\r\n    },\r\n  })\r\n);\r\n\r\nconst CashPanel = observer(() => {\r\n  const {\r\n    appStore,\r\n    typesStore,\r\n  }: { appStore: AppStore; typesStore: TypesStore } = useStores();\r\n\r\n  const styles = useStyles();\r\n  const css = Helpers.combineStyles(styles, classes);\r\n  const theme = useTheme();\r\n\r\n  const getThemeColorStyle = (color?: string) => {\r\n    if (!color || !color.length) {\r\n      return '';\r\n    }\r\n    if (color[0] === '#') {\r\n      return color;\r\n    }\r\n    let result = theme as any;\r\n    color.split('.').forEach((p: string) => {\r\n      result = result[p];\r\n    });\r\n    return result;\r\n  };\r\n\r\n  return (\r\n    <TabPanel\r\n      id=\"menu-cash-tab-panel\"\r\n      labelledby=\"menu-cash-tab-panel\"\r\n      value={appStore.selectedMenuIndex}\r\n      index={0}\r\n      // other={{ className: css.tabPanel }}\r\n    >\r\n      <Grid container className={css.grid} spacing={2}>\r\n        {typesStore.types.map((type: TypeEntry) => (\r\n          <Grid\r\n            key={type.name}\r\n            item\r\n            xs\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"center\"\r\n          >\r\n            <IconButton className={css.card} classes={{ label: css.cardLabel }}>\r\n              <type.IconComponent\r\n                style={{\r\n                  color: getThemeColorStyle(type.iconColor),\r\n                  fontSize: '2rem',\r\n                }}\r\n                className={css.cardIcon}\r\n              />\r\n              <Typography variant=\"subtitle1\" className={css.cardLabelText}>\r\n                {type.label}\r\n              </Typography>\r\n            </IconButton>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n      {/* {typesStore.types.map((type: TypeEntry) => (\r\n        <IconButton\r\n          key={type.name}\r\n          className={css.card}\r\n          classes={{ label: css.cardLabel }}\r\n        >\r\n          <type.IconComponent\r\n            style={{ color: getThemeColorStyle(type.iconColor) }}\r\n          />\r\n          <div className={css.cardLabelText}>{type.label}</div>\r\n        </IconButton>\r\n      ))} */}\r\n    </TabPanel>\r\n  );\r\n});\r\n\r\nexport default CashPanel;\r\n","import { createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport { observer } from 'mobx-react';\r\nimport React from 'react';\r\nimport AppStore from '../../stores/AppStore';\r\nimport useStores from '../../stores/UseStores';\r\nimport Helpers from '../../utility/Helpers';\r\nimport TabPanel from '../TabPanel/TabPanel';\r\nimport classes from './LastRecordsPanel.module.css';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({}));\r\n\r\nconst LastRecordsPanel = observer(() => {\r\n  const { appStore }: { appStore: AppStore } = useStores();\r\n\r\n  const styles = useStyles();\r\n  const css = Helpers.combineStyles(styles, classes);\r\n\r\n  return (\r\n    <TabPanel\r\n      id=\"menu-last-records-tab-panel\"\r\n      labelledby=\"menu-last-records-tab-panel\"\r\n      value={appStore.selectedMenuIndex}\r\n      index={1}\r\n      other={{ className: css.tabPanel }}\r\n    >\r\n      <div>Not realized yet</div>\r\n    </TabPanel>\r\n  );\r\n});\r\n\r\nexport default LastRecordsPanel;\r\n","import {\r\n  createStyles,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  makeStyles,\r\n  Theme,\r\n  useTheme,\r\n} from '@material-ui/core';\r\nimport { observer } from 'mobx-react';\r\nimport React from 'react';\r\nimport TypeEntry from '../../models/entries/TypeEntry';\r\nimport AppStore from '../../stores/AppStore';\r\nimport TypesStore from '../../stores/TypesStore';\r\nimport useStores from '../../stores/UseStores';\r\nimport Helpers from '../../utility/Helpers';\r\nimport TabPanel from '../TabPanel/TabPanel';\r\nimport classes from './TypesPanel.module.css';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({}));\r\n\r\nconst TypesPanel = observer(() => {\r\n  const {\r\n    appStore,\r\n    typesStore,\r\n  }: { appStore: AppStore; typesStore: TypesStore } = useStores();\r\n\r\n  const styles = useStyles();\r\n  const css = Helpers.combineStyles(styles, classes);\r\n  const theme = useTheme();\r\n\r\n  const getThemeColorStyle = (color?: string) => {\r\n    if (!color || !color.length) {\r\n      return '';\r\n    }\r\n    if (color[0] === '#') {\r\n      return color;\r\n    }\r\n    let result = theme as any;\r\n    color.split('.').forEach((p: string) => {\r\n      result = result[p];\r\n    });\r\n    return result;\r\n  };\r\n\r\n  return (\r\n    <TabPanel\r\n      id=\"menu-types-tab-panel\"\r\n      labelledby=\"menu-types-tab-panel\"\r\n      value={appStore.selectedMenuIndex}\r\n      index={2}\r\n      other={{ className: css.tabPanel }}\r\n    >\r\n      <List component=\"nav\" className={css.list}>\r\n        {typesStore.types.map((type: TypeEntry) => (\r\n          <div key={type.name}>\r\n            <ListItem button>\r\n              <ListItemAvatar>\r\n                <type.IconComponent\r\n                  style={{\r\n                    color: getThemeColorStyle(type.iconColor),\r\n                    fontSize: '2rem',\r\n                  }}\r\n                />\r\n              </ListItemAvatar>\r\n              <ListItemText\r\n                primary={type.label}\r\n                primaryTypographyProps={{ variant: 'subtitle1' }}\r\n              />\r\n            </ListItem>\r\n            <Divider component=\"div\" />\r\n          </div>\r\n        ))}\r\n      </List>\r\n    </TabPanel>\r\n  );\r\n});\r\n\r\nexport default TypesPanel;\r\n","import { createStyles, Fab, makeStyles, Theme } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { observer } from 'mobx-react';\r\nimport React from 'react';\r\nimport Helpers from '../../utility/Helpers';\r\nimport CashPanel from '../CashPanel/CashPanel';\r\nimport LastRecordsPanel from '../LastRecordsPanel/LastRecordsPanel';\r\nimport TypesPanel from '../TypesPanel/TypesPanel';\r\nimport classes from './Body.module.css';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    body: {\r\n      padding: theme.spacing(2),\r\n    },\r\n    fab: {\r\n      position: 'fixed',\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n    },\r\n  })\r\n);\r\n\r\nconst Body = observer(() => {\r\n  // const { appStore }: { appStore: AppStore } = useStores();\r\n\r\n  const styles = useStyles();\r\n  const css = Helpers.combineStyles(styles, classes);\r\n\r\n  return (\r\n    <div className={css.body}>\r\n      <CashPanel />\r\n      <LastRecordsPanel />\r\n      <TypesPanel />\r\n      <Fab size=\"medium\" color=\"primary\" aria-label=\"add\" className={css.fab}>\r\n        <AddIcon />\r\n      </Fab>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Body;\r\n","import {\r\n  AppBar,\r\n  Box,\r\n  Button,\r\n  createStyles,\r\n  IconButton,\r\n  makeStyles,\r\n  Tab,\r\n  Tabs,\r\n  Theme,\r\n  Toolbar,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport {\r\n  ArrowDropDown as ArrowDropDownIcon,\r\n  AttachMoney as AttachMoneyIcon,\r\n  List as ListIcon,\r\n  Menu as MenuIcon,\r\n  MenuBook as MenuBookIcon,\r\n  MoreHoriz as MoreHorizIcon,\r\n  Search as SearchIcon,\r\n} from '@material-ui/icons';\r\nimport { observer } from 'mobx-react';\r\nimport React from 'react';\r\nimport AppStore from '../../stores/AppStore';\r\nimport useStores from '../../stores/UseStores';\r\nimport Helpers from '../../utility/Helpers';\r\nimport classes from './Menu.module.css';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    firstBar: {\r\n      background: theme.palette.primary.light,\r\n    },\r\n    secondBar: {\r\n      background: theme.palette.primary.dark,\r\n    },\r\n    menuIcon: {\r\n      color: theme.palette.background.default,\r\n    },\r\n    comboButton: {\r\n      color: theme.palette.background.default,\r\n    },\r\n    searchIcon: {\r\n      color: theme.palette.background.default,\r\n    },\r\n  })\r\n);\r\n\r\nconst Menu = observer(() => {\r\n  const { appStore }: { appStore: AppStore } = useStores();\r\n\r\n  const styles = useStyles();\r\n  const css = Helpers.combineStyles(styles, classes);\r\n\r\n  const menuTabChanged = (event: any, newValue: number) => {\r\n    appStore.setSelectedMenuIndex(newValue);\r\n  };\r\n\r\n  const menuTabProps = (name: string) => {\r\n    return {\r\n      id: `menu-tab-${name}`,\r\n      'aria-controls': `menu-tab-${name}`,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\" className={css.firstBar}>\r\n        <Toolbar>\r\n          {appStore.selectedMenuIndex === 0 && (\r\n            <Typography variant=\"h6\" className={css.headerTitle}>\r\n              Внести оплату\r\n            </Typography>\r\n          )}\r\n          {appStore.selectedMenuIndex === 1 && (\r\n            <Box className={css.headerBox}>\r\n              <IconButton>\r\n                <MenuIcon className={css.menuIcon} />\r\n              </IconButton>\r\n              <Button\r\n                className={css.comboButton}\r\n                endIcon={<ArrowDropDownIcon />}\r\n              >\r\n                <span className={css.comboButtonTextBox}>\r\n                  <span>{new Date().toDateString()}</span>\r\n                  <span>Записей 21</span>\r\n                </span>\r\n              </Button>\r\n              <IconButton>\r\n                <SearchIcon className={css.searchIcon} />\r\n              </IconButton>\r\n            </Box>\r\n          )}\r\n          {appStore.selectedMenuIndex === 2 && (\r\n            <Typography variant=\"h6\" className={css.headerTitle}>\r\n              Типы\r\n            </Typography>\r\n          )}\r\n          {appStore.selectedMenuIndex === 3 && (\r\n            <Typography variant=\"h6\" className={css.headerTitle}>\r\n              Еще\r\n            </Typography>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n      <AppBar position=\"static\" color=\"primary\" className={css.secondBar}>\r\n        <Tabs\r\n          value={appStore.selectedMenuIndex}\r\n          onChange={menuTabChanged}\r\n          aria-label=\"menu tabs\"\r\n          variant=\"fullWidth\"\r\n        >\r\n          <Tab {...menuTabProps('cash')} icon={<AttachMoneyIcon />} />\r\n          <Tab {...menuTabProps('last-records')} icon={<MenuBookIcon />} />\r\n          <Tab {...menuTabProps('types')} icon={<ListIcon />} />\r\n          <Tab {...menuTabProps('menu')} icon={<MoreHorizIcon />} />\r\n        </Tabs>\r\n      </AppBar>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Menu;\r\n","import AppStore from '../stores/AppStore';\r\n\r\nexport default class CacheService {\r\n  private appStore: AppStore;\r\n\r\n  constructor(appStore: AppStore) {\r\n    this.appStore = appStore;\r\n    this.get('appVersion', new Date()).then((r) => {\r\n      if (appStore.version !== r) {\r\n        this.clear();\r\n        this.add('appVersion', appStore.version);\r\n      }\r\n    });\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  public async add(key: string, entry: any) {\r\n    let entryStr: string;\r\n    if (typeof entry !== 'string') {\r\n      entryStr = JSON.stringify({ date: new Date(), entry });\r\n    } else {\r\n      entryStr = entry;\r\n    }\r\n    const result = await localStorage.setItem(key, entryStr);\r\n    return result;\r\n  }\r\n\r\n  public async get<T>(key: string, validAt?: Date): Promise<any> {\r\n    let result: string | null = null;\r\n    if (!this.appStore.enableCache) {\r\n      return result;\r\n    }\r\n    result = await localStorage.getItem(key);\r\n    if (result) {\r\n      console.log(`Key: ${key} loaded from cache`);\r\n    }\r\n    if (!result || !result.length) {\r\n      return result;\r\n    }\r\n    try {\r\n      const parsedResult = JSON.parse(result);\r\n      if (validAt) {\r\n        if (new Date(parsedResult.date) < validAt) {\r\n          return parsedResult.entry;\r\n        }\r\n        console.log(\r\n          `Key: ${key} date expired. ValidAt: ${validAt}. ExpiredAt: ${parsedResult.date}`\r\n        );\r\n        return null;\r\n      }\r\n      return parsedResult.entry;\r\n    } catch {\r\n      return result;\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  public async clear() {\r\n    await localStorage.clear();\r\n  }\r\n}\r\n","import { action, observable } from 'mobx';\r\nimport * as AppJson from '../../package.json';\r\nimport ServicesStore from './ServicesStore';\r\n\r\nclass AppStore {\r\n  version = AppJson.version;\r\n  private _services!: ServicesStore;\r\n  get services() {\r\n    // eslint-disable-next-line no-underscore-dangle\r\n    return this._services;\r\n  }\r\n  set services(value: ServicesStore) {\r\n    // eslint-disable-next-line no-underscore-dangle\r\n    this._services = value;\r\n    // eslint-disable-next-line no-underscore-dangle\r\n    this._loadSelectedMenuIndex();\r\n  }\r\n\r\n  // NOTE: when application is change version, cache will be cleared\r\n  @observable enableCache = true;\r\n  @observable selectedMenuIndex = 0;\r\n\r\n  @action setSelectedMenuIndex = (newValue: number) => {\r\n    this.selectedMenuIndex = newValue;\r\n    this.services.cache.add('selectedMenuIndex', this.selectedMenuIndex);\r\n  };\r\n\r\n  private _loadSelectedMenuIndex = async () => {\r\n    if (this.services && this.services.cache) {\r\n      const selectedMenuIndex = await this.services.cache.get(\r\n        'selectedMenuIndex'\r\n      );\r\n      if (selectedMenuIndex) {\r\n        this.selectedMenuIndex = selectedMenuIndex;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default AppStore;\r\n","import CacheService from '../services/CacheService';\r\n\r\nclass ServicesStore {\r\n  cache: CacheService;\r\n\r\n  constructor(cache: CacheService) {\r\n    this.cache = cache;\r\n  }\r\n}\r\n\r\nexport default ServicesStore;\r\n","import {\r\n  ChildFriendly,\r\n  DirectionsBus,\r\n  Fastfood,\r\n  ImportantDevices,\r\n  LocalGasStation,\r\n  LocalGroceryStore,\r\n  LocalMall,\r\n  MoreVert,\r\n} from '@material-ui/icons';\r\nimport { observable } from 'mobx';\r\nimport TypeEntry from '../models/entries/TypeEntry';\r\n\r\nclass TypesStore {\r\n  @observable types!: TypeEntry[];\r\n\r\n  constructor() {\r\n    this.initializeDefaultTypes();\r\n  }\r\n\r\n  private initializeDefaultTypes = () => {\r\n    this.types = [];\r\n\r\n    this.types.push({\r\n      IconComponent: Fastfood,\r\n      name: 'menuFood',\r\n      iconColor: 'palette.secondary.dark',\r\n      label: 'Еда',\r\n    });\r\n\r\n    this.types.push({\r\n      IconComponent: LocalGroceryStore,\r\n      name: 'menuStore',\r\n      iconColor: 'palette.success.dark',\r\n      label: 'Магазин',\r\n    });\r\n\r\n    this.types.push({\r\n      IconComponent: DirectionsBus,\r\n      name: 'menuBus',\r\n      iconColor: 'palette.warning.dark',\r\n      label: 'Автобус',\r\n    });\r\n\r\n    this.types.push({\r\n      IconComponent: LocalMall,\r\n      name: 'menuClothes',\r\n      iconColor: 'palette.primary.dark',\r\n      label: 'Вещи',\r\n    });\r\n\r\n    this.types.push({\r\n      IconComponent: LocalGasStation,\r\n      name: 'menuGasStation',\r\n      iconColor: 'palette.primary.light',\r\n      label: 'Заправка',\r\n    });\r\n\r\n    this.types.push({\r\n      IconComponent: ChildFriendly,\r\n      name: 'menuChilds',\r\n      iconColor: 'palette.warning.light',\r\n      label: 'Дети',\r\n    });\r\n\r\n    this.types.push({\r\n      IconComponent: ImportantDevices,\r\n      name: 'menuServices',\r\n      iconColor: 'palette.secondary.light',\r\n      label: 'Услуги',\r\n    });\r\n\r\n    this.types.push({\r\n      IconComponent: MoreVert,\r\n      name: 'menuOther',\r\n      iconColor: 'palette.success.light',\r\n      label: 'Другое',\r\n    });\r\n  };\r\n}\r\n\r\nexport default TypesStore;\r\n","import CacheService from '../services/CacheService';\r\nimport AppStore from './AppStore';\r\nimport ServicesStore from './ServicesStore';\r\nimport TypesStore from './TypesStore';\r\n\r\nconst appStore = new AppStore();\r\nconst cacheService = new CacheService(appStore);\r\nconst servicesStore = new ServicesStore(cacheService);\r\nappStore.services = servicesStore;\r\nconst typesStore = new TypesStore();\r\n\r\nconst stores = {\r\n  appStore,\r\n  typesStore,\r\n};\r\n\r\nexport default stores;\r\n","import { CssBaseline } from '@material-ui/core';\r\nimport { Provider } from 'mobx-react';\r\nimport React from 'react';\r\nimport classes from './App.module.css';\r\nimport Body from './components/Body/Body';\r\nimport Menu from './components/Menu/Menu';\r\nimport store from './stores';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <CssBaseline />\r\n      <div className={classes.page}>\r\n        <Menu />\r\n        <Body />\r\n      </div>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}